{"version":3,"sources":["components/Accordion.js","components/WeeklyWeatherCard.js","images/wallpaper3.jpg","components/Time.js","components/IconConverter.js","components/CurrentWeatherCard.js","components/WeatherCard.js","components/WeatherOverview.js","App.js","index.js"],"names":["Accordion","daily","followingDay","InnerAccordion","title","children","minTemp","maxTemp","icon","React","useState","isOpen","setOpen","className","onClick","src","alt","toLocaleDateString","weather","temp","min","toFixed","max","Math","floor","morn","day","eve","night","WeeklyWeatherCard","weatherData","weekDays","Array","fill","map","x","index","Date","id","date","DateTime","setDate","useEffect","timer","setInterval","clearInterval","class","getHours","getMinutes","IconConverter","name","iconId","flip","rotate","Fixed","Width","CardExampleCard","showWeekly","setShowWeekly","weeklyData","style","backgroundImage","background","main","Time","temp_min","temp_max","humidity","WeatherCard","city","lat","long","weeklydata","setWeeklyData","currentdata","currentsetData","showOverview","setShowOverview","fetch","process","then","res","json","result","console","log","CurrentWeatherCard","WeatherOverview","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e419199.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Accordion = ({daily, followingDay}) => {\r\n\r\n    const InnerAccordion = ({ title, children, minTemp, maxTemp, icon }) => {\r\n        const [isOpen, setOpen] = React.useState(false);\r\n        return (\r\n            \r\n          <div className=\"accordion-wrapper\">\r\n            \r\n            <div\r\n              className={`accordion-title ${isOpen ? \"open\" : \"\"}`}\r\n              onClick={() => setOpen(!isOpen)}\r\n              >\r\n              <p>         {title}{\" \"}    <img\r\n              src={`http://openweathermap.org/img/wn/${icon}.png`}\r\n              alt=\"icon\"\r\n            />{\" \"}\r\n            {minTemp} / {maxTemp} C°</p>\r\n            </div>\r\n            <div className={`accordion-item ${!isOpen ? \"collapsed\" : \"\"}`}>\r\n              <div className=\"accordion-content\">{children}</div>\r\n            </div>\r\n          </div>\r\n        );\r\n      };\r\n\r\n\r\n    return(\r\n    <InnerAccordion\r\n      title={followingDay.toLocaleDateString()}\r\n      icon={daily.weather[0].icon}\r\n      minTemp={daily.temp.min.toFixed(1)}\r\n      maxTemp={daily.temp.max.toFixed(1)}\r\n    >\r\n    <p>morning: {Math.floor(daily.temp.morn.toFixed(1))}C°</p>\r\n    <p>afternoon: {Math.floor(daily.temp.day.toFixed(1))}C°</p>\r\n    <p>evening: {Math.floor(daily.temp.eve.toFixed(1))}C°</p>\r\n    <p>night: {Math.floor(daily.temp.night.toFixed(1))}C°</p>\r\n    \r\n    </InnerAccordion>)\r\n\r\n}","import React from 'react';\r\nimport '../App.css'\r\nimport { Accordion } from './Accordion';\r\n\r\nexport default function WeeklyWeatherCard ({weatherData}){ \r\n\r\n\r\n\r\n    const dayInMillis = 24*60*60*1000\r\n\r\n    const weekDays =  Array(7).fill().map((x, index)=> index)\r\n      .map((index) => new Date( dayInMillis * index ))\r\n\r\n\r\n      return (<div className=\"dropdown\">\r\n         <div className=\"dropdown-content\">\r\n         <div className=\"wrapper Amsterdam\" id=\"third\">\r\n     { weekDays.map((date, index) => <Accordion key={index} followingDay={date} daily={weatherData.daily[index]} />)}\r\n     </div></div></div>)\r\n    }\r\n","export default __webpack_public_path__ + \"static/media/wallpaper3.aeb26f3c.jpg\";","import  React, { useState , useEffect } from 'react'\r\nimport '../App.css'\r\n\r\n\r\n\r\nexport const DateTime = () => {\r\n\r\n    const [date, setDate] = useState(new Date());\r\n    \r\n    useEffect(() => {\r\n        const timer = setInterval(() => setDate(new Date()), 1000 )\r\n        return () => clearInterval(timer)\r\n        \r\n    \r\n    });\r\n\r\n    return(\r\n        <div class=\"time_date_background\">\r\n    <div className=\"date\"> {date.toLocaleDateString()}</div>\r\n        <div className=\"time\">{date.getHours()}:{date.getMinutes()}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DateTime\r\n","import React from 'react'\r\nimport WeatherIcon from 'react-icons-weather'\r\n\r\nexport default function IconConverter({icon}) {\r\n    return (\r\n\r\n        <div className=\"icon\">\r\n        <WeatherIcon name=\"owm\" iconId={icon} flip=\"horizontal\" rotate=\"90\" Fixed Width/>\r\n      </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport background from '../images/wallpaper3.jpg'\r\nimport Time from \"./Time\";\r\nimport IconConverter from \"./IconConverter\";\r\nimport WeeklyWeatherCard from './WeeklyWeatherCard';\r\n\r\nconst CardExampleCard = ({weatherData, showWeekly, setShowWeekly, weeklyData}) => {\r\n\r\n \r\n\r\n    return (\r\n\r\n    <div className=\"background\" style={{ backgroundImage: `url(${background})` }}>\r\n           \r\n           <button onClick={() => setShowWeekly(!showWeekly)}>Click me!</button>\r\n        <div className=\"city_name_background\">\r\n            <h1 className=\"city_name\">{weatherData.name}</h1>\r\n        </div>\r\n        \r\n        {weatherData.weather &&\r\n        <div className=\"temprature_over_icon\">\r\n            <IconConverter className=\"icon\" icon={weatherData.weather[0].id}/>\r\n            <p className=\"temprature\"> {Math.floor(weatherData.main.temp)} C°</p>\r\n            <Time/>\r\n         \r\n        </div>\r\n}\r\n{!showWeekly && \r\n        <div className=\"info_background\">\r\n            <p>Min Temprature: {Math.floor(weatherData.main.temp_min)} C°</p>\r\n            <p>Max Temprature: {Math.floor(weatherData.main.temp_max)} C°</p>\r\n            <p>Humidity: {weatherData.main.humidity} %</p>\r\n            </div>\r\n}\r\n\r\n{showWeekly && weeklyData && weeklyData.daily && <WeeklyWeatherCard weatherData={weeklyData} />}\r\n\r\n  </div>\r\n\r\n)\r\n    }\r\n\r\nexport default CardExampleCard;","import React, { useEffect, useState } from \"react\";\r\nimport WeeklyWeatherCard from \"./WeeklyWeatherCard\";\r\nimport CurrentWeatherCard from \"./CurrentWeatherCard\";\r\n\r\nexport default function WeatherCard({ city, lat, long }) {\r\n  const [weeklydata, setWeeklyData] = useState([]);\r\n\r\n  const [currentdata, currentsetData] = useState([]);\r\n  const [showOverview, setShowOverview] = useState(false)\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setWeeklyData(result);\r\n        console.log(result);\r\n      });\r\n  }, [lat, long]);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `${process.env.REACT_APP_API_URL}/weather/?q=${city}&units=metric&lang=nl&APPID=${process.env.REACT_APP_API_KEY}`\r\n    )\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        currentsetData(result);\r\n      });\r\n  }, [city]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {currentdata.main  && (\r\n        <CurrentWeatherCard weatherData={currentdata} weeklyData={weeklydata} setShowWeekly={setShowOverview} showWeekly={showOverview} />\r\n      )}\r\n\r\n      {weeklydata.daily && showOverview && false && (\r\n        <WeeklyWeatherCard weatherData={weeklydata} index=\"1\" />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import WeatherCard from './WeatherCard';\r\nimport React from 'react';\r\n\r\n\r\nexport default function WeatherOverview() {\r\n\r\n    return (\r\n    <>\r\n    <div className=\"Amsterdam\">\r\n       <WeatherCard city=\"Amsterdam\" lat=\"52.377956\" long=\"4.897070\" />\r\n    </div>\r\n      <div className=\"Nijmegen\">\r\n      <WeatherCard city=\"Nijmegen\" lat=\"51.8425\" long=\"5.85278\"/>\r\n      </div>\r\n</>\r\n  );\r\n}\r\n\r\n","import './App.css';\nimport WeatherOverview from './components/WeatherOverview';\nimport React from 'react';\n\n\nexport default function App() {\n    return (\n      <WeatherOverview/>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}